int can(int x){
	for (int i=1 ; i<=len ; i++){
		if (mp[x][i] && !vis[i]) {
			vis[i] = 1;
			if (link[i]==-1 || can(link[i])){
				link[i] = x;
				return 1;
			}
		}
	}
	return 0;
}

int can(int x){
	for (int i=0 ; i< mp[x].size() ; i++){
		int now = mp[x][i];
		if (!vis[now]){
			vis[now] = 1;
			if (link[now]==-1 || can(link[now])){
				link[now] = x;
				return 1;
			}
		}
	}
	return 0;
}


int BFS(){
	for (int i=0 ; i<=n ; i++) 
		judge[i] = -1;
	judge[1] = 0;
	queue[0] = 1; 
	int st = 0, se = 1;
	int v = queue[st];
	while (st < se){
		v = queue[st];
		for (int i=1 ; i<=n ; i++){
			if (mp[v][i]){
				if (judge[i] == -1){
					judge[i] = (judge[v] + 1)%2;//·Ö×é
					queue[se++] = i; 
				}
				else {
					if (judge[i] == judge[v]){
						return 0;
					}
				}
			}
		}
		st++;
	}
	return 1;
}

int can(int x){
	for (int i=1 ; i<=n ; i++){
		if (mp[x][i] && !vis[i]){
			vis[i] = 1;
			if (link[i]==0 || can(link[i])){
				link[i] = x;
				return 1;
			}
		}
	}
	return 0;
}